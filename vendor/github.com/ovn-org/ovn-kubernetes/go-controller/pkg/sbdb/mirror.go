// Code generated by "libovsdb.modelgen"
// DO NOT EDIT.

package sbdb

import "github.com/ovn-org/libovsdb/model"

const MirrorTable = "Mirror"

type (
	MirrorFilter = string
	MirrorType   = string
)

var (
	MirrorFilterFromLport MirrorFilter = "from-lport"
	MirrorFilterToLport   MirrorFilter = "to-lport"
	MirrorFilterBoth      MirrorFilter = "both"
	MirrorTypeGre         MirrorType   = "gre"
	MirrorTypeErspan      MirrorType   = "erspan"
	MirrorTypeLocal       MirrorType   = "local"
)

// Mirror defines an object in Mirror table
type Mirror struct {
	UUID        string            `ovsdb:"_uuid"`
	ExternalIDs map[string]string `ovsdb:"external_ids"`
	Filter      MirrorFilter      `ovsdb:"filter"`
	Index       int               `ovsdb:"index"`
	Name        string            `ovsdb:"name"`
	Sink        string            `ovsdb:"sink"`
	Type        MirrorType        `ovsdb:"type"`
}

func (a *Mirror) GetUUID() string {
	return a.UUID
}

func (a *Mirror) GetExternalIDs() map[string]string {
	return a.ExternalIDs
}

func copyMirrorExternalIDs(a map[string]string) map[string]string {
	if a == nil {
		return nil
	}
	b := make(map[string]string, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalMirrorExternalIDs(a, b map[string]string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *Mirror) GetFilter() MirrorFilter {
	return a.Filter
}

func (a *Mirror) GetIndex() int {
	return a.Index
}

func (a *Mirror) GetName() string {
	return a.Name
}

func (a *Mirror) GetSink() string {
	return a.Sink
}

func (a *Mirror) GetType() MirrorType {
	return a.Type
}

func (a *Mirror) DeepCopyInto(b *Mirror) {
	*b = *a
	b.ExternalIDs = copyMirrorExternalIDs(a.ExternalIDs)
}

func (a *Mirror) DeepCopy() *Mirror {
	b := new(Mirror)
	a.DeepCopyInto(b)
	return b
}

func (a *Mirror) CloneModelInto(b model.Model) {
	c := b.(*Mirror)
	a.DeepCopyInto(c)
}

func (a *Mirror) CloneModel() model.Model {
	return a.DeepCopy()
}

func (a *Mirror) Equals(b *Mirror) bool {
	return a.UUID == b.UUID &&
		equalMirrorExternalIDs(a.ExternalIDs, b.ExternalIDs) &&
		a.Filter == b.Filter &&
		a.Index == b.Index &&
		a.Name == b.Name &&
		a.Sink == b.Sink &&
		a.Type == b.Type
}

func (a *Mirror) EqualsModel(b model.Model) bool {
	c := b.(*Mirror)
	return a.Equals(c)
}

var _ model.CloneableModel = &Mirror{}
var _ model.ComparableModel = &Mirror{}
