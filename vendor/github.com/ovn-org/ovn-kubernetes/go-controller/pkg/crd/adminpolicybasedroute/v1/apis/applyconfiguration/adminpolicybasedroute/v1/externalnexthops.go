/*


Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1

import (
	adminpolicybasedroutev1 "github.com/ovn-org/ovn-kubernetes/go-controller/pkg/crd/adminpolicybasedroute/v1"
)

// ExternalNextHopsApplyConfiguration represents a declarative configuration of the ExternalNextHops type for use
// with apply.
type ExternalNextHopsApplyConfiguration struct {
	StaticHops  []*adminpolicybasedroutev1.StaticHop  `json:"static,omitempty"`
	DynamicHops []*adminpolicybasedroutev1.DynamicHop `json:"dynamic,omitempty"`
}

// ExternalNextHopsApplyConfiguration constructs a declarative configuration of the ExternalNextHops type for use with
// apply.
func ExternalNextHops() *ExternalNextHopsApplyConfiguration {
	return &ExternalNextHopsApplyConfiguration{}
}

// WithStaticHops adds the given value to the StaticHops field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the StaticHops field.
func (b *ExternalNextHopsApplyConfiguration) WithStaticHops(values ...**adminpolicybasedroutev1.StaticHop) *ExternalNextHopsApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithStaticHops")
		}
		b.StaticHops = append(b.StaticHops, *values[i])
	}
	return b
}

// WithDynamicHops adds the given value to the DynamicHops field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the DynamicHops field.
func (b *ExternalNextHopsApplyConfiguration) WithDynamicHops(values ...**adminpolicybasedroutev1.DynamicHop) *ExternalNextHopsApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithDynamicHops")
		}
		b.DynamicHops = append(b.DynamicHops, *values[i])
	}
	return b
}
