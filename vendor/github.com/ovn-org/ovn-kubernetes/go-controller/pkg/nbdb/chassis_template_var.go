// Code generated by "libovsdb.modelgen"
// DO NOT EDIT.

package nbdb

import "github.com/ovn-org/libovsdb/model"

const ChassisTemplateVarTable = "Chassis_Template_Var"

// ChassisTemplateVar defines an object in Chassis_Template_Var table
type ChassisTemplateVar struct {
	UUID        string            `ovsdb:"_uuid"`
	Chassis     string            `ovsdb:"chassis"`
	ExternalIDs map[string]string `ovsdb:"external_ids"`
	Variables   map[string]string `ovsdb:"variables"`
}

func (a *ChassisTemplateVar) GetUUID() string {
	return a.UUID
}

func (a *ChassisTemplateVar) GetChassis() string {
	return a.Chassis
}

func (a *ChassisTemplateVar) GetExternalIDs() map[string]string {
	return a.ExternalIDs
}

func copyChassisTemplateVarExternalIDs(a map[string]string) map[string]string {
	if a == nil {
		return nil
	}
	b := make(map[string]string, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalChassisTemplateVarExternalIDs(a, b map[string]string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *ChassisTemplateVar) GetVariables() map[string]string {
	return a.Variables
}

func copyChassisTemplateVarVariables(a map[string]string) map[string]string {
	if a == nil {
		return nil
	}
	b := make(map[string]string, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalChassisTemplateVarVariables(a, b map[string]string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *ChassisTemplateVar) DeepCopyInto(b *ChassisTemplateVar) {
	*b = *a
	b.ExternalIDs = copyChassisTemplateVarExternalIDs(a.ExternalIDs)
	b.Variables = copyChassisTemplateVarVariables(a.Variables)
}

func (a *ChassisTemplateVar) DeepCopy() *ChassisTemplateVar {
	b := new(ChassisTemplateVar)
	a.DeepCopyInto(b)
	return b
}

func (a *ChassisTemplateVar) CloneModelInto(b model.Model) {
	c := b.(*ChassisTemplateVar)
	a.DeepCopyInto(c)
}

func (a *ChassisTemplateVar) CloneModel() model.Model {
	return a.DeepCopy()
}

func (a *ChassisTemplateVar) Equals(b *ChassisTemplateVar) bool {
	return a.UUID == b.UUID &&
		a.Chassis == b.Chassis &&
		equalChassisTemplateVarExternalIDs(a.ExternalIDs, b.ExternalIDs) &&
		equalChassisTemplateVarVariables(a.Variables, b.Variables)
}

func (a *ChassisTemplateVar) EqualsModel(b model.Model) bool {
	c := b.(*ChassisTemplateVar)
	return a.Equals(c)
}

var _ model.CloneableModel = &ChassisTemplateVar{}
var _ model.ComparableModel = &ChassisTemplateVar{}
