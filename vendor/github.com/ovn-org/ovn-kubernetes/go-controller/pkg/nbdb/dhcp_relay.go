// Code generated by "libovsdb.modelgen"
// DO NOT EDIT.

package nbdb

import "github.com/ovn-org/libovsdb/model"

const DHCPRelayTable = "DHCP_Relay"

// DHCPRelay defines an object in DHCP_Relay table
type DHCPRelay struct {
	UUID        string            `ovsdb:"_uuid"`
	ExternalIDs map[string]string `ovsdb:"external_ids"`
	Name        string            `ovsdb:"name"`
	Options     map[string]string `ovsdb:"options"`
	Servers     *string           `ovsdb:"servers"`
}

func (a *DHCPRelay) GetUUID() string {
	return a.UUID
}

func (a *DHCPRelay) GetExternalIDs() map[string]string {
	return a.ExternalIDs
}

func copyDHCPRelayExternalIDs(a map[string]string) map[string]string {
	if a == nil {
		return nil
	}
	b := make(map[string]string, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalDHCPRelayExternalIDs(a, b map[string]string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *DHCPRelay) GetName() string {
	return a.Name
}

func (a *DHCPRelay) GetOptions() map[string]string {
	return a.Options
}

func copyDHCPRelayOptions(a map[string]string) map[string]string {
	if a == nil {
		return nil
	}
	b := make(map[string]string, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalDHCPRelayOptions(a, b map[string]string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *DHCPRelay) GetServers() *string {
	return a.Servers
}

func copyDHCPRelayServers(a *string) *string {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalDHCPRelayServers(a, b *string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *DHCPRelay) DeepCopyInto(b *DHCPRelay) {
	*b = *a
	b.ExternalIDs = copyDHCPRelayExternalIDs(a.ExternalIDs)
	b.Options = copyDHCPRelayOptions(a.Options)
	b.Servers = copyDHCPRelayServers(a.Servers)
}

func (a *DHCPRelay) DeepCopy() *DHCPRelay {
	b := new(DHCPRelay)
	a.DeepCopyInto(b)
	return b
}

func (a *DHCPRelay) CloneModelInto(b model.Model) {
	c := b.(*DHCPRelay)
	a.DeepCopyInto(c)
}

func (a *DHCPRelay) CloneModel() model.Model {
	return a.DeepCopy()
}

func (a *DHCPRelay) Equals(b *DHCPRelay) bool {
	return a.UUID == b.UUID &&
		equalDHCPRelayExternalIDs(a.ExternalIDs, b.ExternalIDs) &&
		a.Name == b.Name &&
		equalDHCPRelayOptions(a.Options, b.Options) &&
		equalDHCPRelayServers(a.Servers, b.Servers)
}

func (a *DHCPRelay) EqualsModel(b model.Model) bool {
	c := b.(*DHCPRelay)
	return a.Equals(c)
}

var _ model.CloneableModel = &DHCPRelay{}
var _ model.ComparableModel = &DHCPRelay{}
