// Code generated by "libovsdb.modelgen"
// DO NOT EDIT.

package nbdb

import "github.com/ovn-org/libovsdb/model"

const SampleCollectorTable = "Sample_Collector"

// SampleCollector defines an object in Sample_Collector table
type SampleCollector struct {
	UUID        string            `ovsdb:"_uuid"`
	ExternalIDs map[string]string `ovsdb:"external_ids"`
	ID          int               `ovsdb:"id"`
	Name        string            `ovsdb:"name"`
	Probability int               `ovsdb:"probability"`
	SetID       int               `ovsdb:"set_id"`
}

func (a *SampleCollector) GetUUID() string {
	return a.UUID
}

func (a *SampleCollector) GetExternalIDs() map[string]string {
	return a.ExternalIDs
}

func copySampleCollectorExternalIDs(a map[string]string) map[string]string {
	if a == nil {
		return nil
	}
	b := make(map[string]string, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalSampleCollectorExternalIDs(a, b map[string]string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *SampleCollector) GetID() int {
	return a.ID
}

func (a *SampleCollector) GetName() string {
	return a.Name
}

func (a *SampleCollector) GetProbability() int {
	return a.Probability
}

func (a *SampleCollector) GetSetID() int {
	return a.SetID
}

func (a *SampleCollector) DeepCopyInto(b *SampleCollector) {
	*b = *a
	b.ExternalIDs = copySampleCollectorExternalIDs(a.ExternalIDs)
}

func (a *SampleCollector) DeepCopy() *SampleCollector {
	b := new(SampleCollector)
	a.DeepCopyInto(b)
	return b
}

func (a *SampleCollector) CloneModelInto(b model.Model) {
	c := b.(*SampleCollector)
	a.DeepCopyInto(c)
}

func (a *SampleCollector) CloneModel() model.Model {
	return a.DeepCopy()
}

func (a *SampleCollector) Equals(b *SampleCollector) bool {
	return a.UUID == b.UUID &&
		equalSampleCollectorExternalIDs(a.ExternalIDs, b.ExternalIDs) &&
		a.ID == b.ID &&
		a.Name == b.Name &&
		a.Probability == b.Probability &&
		a.SetID == b.SetID
}

func (a *SampleCollector) EqualsModel(b model.Model) bool {
	c := b.(*SampleCollector)
	return a.Equals(c)
}

var _ model.CloneableModel = &SampleCollector{}
var _ model.ComparableModel = &SampleCollector{}
