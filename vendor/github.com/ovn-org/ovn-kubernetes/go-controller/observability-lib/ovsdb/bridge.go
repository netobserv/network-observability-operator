// Code generated by "libovsdb.modelgen"
// DO NOT EDIT.

package ovsdb

import "github.com/ovn-org/libovsdb/model"

const BridgeTable = "Bridge"

type (
	BridgeFailMode  = string
	BridgeProtocols = string
)

var (
	BridgeFailModeStandalone  BridgeFailMode  = "standalone"
	BridgeFailModeSecure      BridgeFailMode  = "secure"
	BridgeProtocolsOpenflow10 BridgeProtocols = "OpenFlow10"
	BridgeProtocolsOpenflow11 BridgeProtocols = "OpenFlow11"
	BridgeProtocolsOpenflow12 BridgeProtocols = "OpenFlow12"
	BridgeProtocolsOpenflow13 BridgeProtocols = "OpenFlow13"
	BridgeProtocolsOpenflow14 BridgeProtocols = "OpenFlow14"
	BridgeProtocolsOpenflow15 BridgeProtocols = "OpenFlow15"
)

// Bridge defines an object in Bridge table
type Bridge struct {
	UUID                string            `ovsdb:"_uuid"`
	AutoAttach          *string           `ovsdb:"auto_attach"`
	Controller          []string          `ovsdb:"controller"`
	DatapathID          *string           `ovsdb:"datapath_id"`
	DatapathType        string            `ovsdb:"datapath_type"`
	DatapathVersion     string            `ovsdb:"datapath_version"`
	ExternalIDs         map[string]string `ovsdb:"external_ids"`
	FailMode            *BridgeFailMode   `ovsdb:"fail_mode"`
	FloodVLANs          []int             `ovsdb:"flood_vlans"`
	FlowTables          map[int]string    `ovsdb:"flow_tables"`
	IPFIX               *string           `ovsdb:"ipfix"`
	McastSnoopingEnable bool              `ovsdb:"mcast_snooping_enable"`
	Mirrors             []string          `ovsdb:"mirrors"`
	Name                string            `ovsdb:"name"`
	Netflow             *string           `ovsdb:"netflow"`
	OtherConfig         map[string]string `ovsdb:"other_config"`
	Ports               []string          `ovsdb:"ports"`
	Protocols           []BridgeProtocols `ovsdb:"protocols"`
	RSTPEnable          bool              `ovsdb:"rstp_enable"`
	RSTPStatus          map[string]string `ovsdb:"rstp_status"`
	Sflow               *string           `ovsdb:"sflow"`
	Status              map[string]string `ovsdb:"status"`
	STPEnable           bool              `ovsdb:"stp_enable"`
}

func (a *Bridge) GetUUID() string {
	return a.UUID
}

func (a *Bridge) GetAutoAttach() *string {
	return a.AutoAttach
}

func copyBridgeAutoAttach(a *string) *string {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalBridgeAutoAttach(a, b *string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *Bridge) GetController() []string {
	return a.Controller
}

func copyBridgeController(a []string) []string {
	if a == nil {
		return nil
	}
	b := make([]string, len(a))
	copy(b, a)
	return b
}

func equalBridgeController(a, b []string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for i, v := range a {
		if b[i] != v {
			return false
		}
	}
	return true
}

func (a *Bridge) GetDatapathID() *string {
	return a.DatapathID
}

func copyBridgeDatapathID(a *string) *string {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalBridgeDatapathID(a, b *string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *Bridge) GetDatapathType() string {
	return a.DatapathType
}

func (a *Bridge) GetDatapathVersion() string {
	return a.DatapathVersion
}

func (a *Bridge) GetExternalIDs() map[string]string {
	return a.ExternalIDs
}

func copyBridgeExternalIDs(a map[string]string) map[string]string {
	if a == nil {
		return nil
	}
	b := make(map[string]string, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalBridgeExternalIDs(a, b map[string]string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *Bridge) GetFailMode() *BridgeFailMode {
	return a.FailMode
}

func copyBridgeFailMode(a *BridgeFailMode) *BridgeFailMode {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalBridgeFailMode(a, b *BridgeFailMode) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *Bridge) GetFloodVLANs() []int {
	return a.FloodVLANs
}

func copyBridgeFloodVLANs(a []int) []int {
	if a == nil {
		return nil
	}
	b := make([]int, len(a))
	copy(b, a)
	return b
}

func equalBridgeFloodVLANs(a, b []int) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for i, v := range a {
		if b[i] != v {
			return false
		}
	}
	return true
}

func (a *Bridge) GetFlowTables() map[int]string {
	return a.FlowTables
}

func copyBridgeFlowTables(a map[int]string) map[int]string {
	if a == nil {
		return nil
	}
	b := make(map[int]string, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalBridgeFlowTables(a, b map[int]string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *Bridge) GetIPFIX() *string {
	return a.IPFIX
}

func copyBridgeIPFIX(a *string) *string {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalBridgeIPFIX(a, b *string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *Bridge) GetMcastSnoopingEnable() bool {
	return a.McastSnoopingEnable
}

func (a *Bridge) GetMirrors() []string {
	return a.Mirrors
}

func copyBridgeMirrors(a []string) []string {
	if a == nil {
		return nil
	}
	b := make([]string, len(a))
	copy(b, a)
	return b
}

func equalBridgeMirrors(a, b []string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for i, v := range a {
		if b[i] != v {
			return false
		}
	}
	return true
}

func (a *Bridge) GetName() string {
	return a.Name
}

func (a *Bridge) GetNetflow() *string {
	return a.Netflow
}

func copyBridgeNetflow(a *string) *string {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalBridgeNetflow(a, b *string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *Bridge) GetOtherConfig() map[string]string {
	return a.OtherConfig
}

func copyBridgeOtherConfig(a map[string]string) map[string]string {
	if a == nil {
		return nil
	}
	b := make(map[string]string, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalBridgeOtherConfig(a, b map[string]string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *Bridge) GetPorts() []string {
	return a.Ports
}

func copyBridgePorts(a []string) []string {
	if a == nil {
		return nil
	}
	b := make([]string, len(a))
	copy(b, a)
	return b
}

func equalBridgePorts(a, b []string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for i, v := range a {
		if b[i] != v {
			return false
		}
	}
	return true
}

func (a *Bridge) GetProtocols() []BridgeProtocols {
	return a.Protocols
}

func copyBridgeProtocols(a []BridgeProtocols) []BridgeProtocols {
	if a == nil {
		return nil
	}
	b := make([]BridgeProtocols, len(a))
	copy(b, a)
	return b
}

func equalBridgeProtocols(a, b []BridgeProtocols) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for i, v := range a {
		if b[i] != v {
			return false
		}
	}
	return true
}

func (a *Bridge) GetRSTPEnable() bool {
	return a.RSTPEnable
}

func (a *Bridge) GetRSTPStatus() map[string]string {
	return a.RSTPStatus
}

func copyBridgeRSTPStatus(a map[string]string) map[string]string {
	if a == nil {
		return nil
	}
	b := make(map[string]string, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalBridgeRSTPStatus(a, b map[string]string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *Bridge) GetSflow() *string {
	return a.Sflow
}

func copyBridgeSflow(a *string) *string {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalBridgeSflow(a, b *string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *Bridge) GetStatus() map[string]string {
	return a.Status
}

func copyBridgeStatus(a map[string]string) map[string]string {
	if a == nil {
		return nil
	}
	b := make(map[string]string, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalBridgeStatus(a, b map[string]string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *Bridge) GetSTPEnable() bool {
	return a.STPEnable
}

func (a *Bridge) DeepCopyInto(b *Bridge) {
	*b = *a
	b.AutoAttach = copyBridgeAutoAttach(a.AutoAttach)
	b.Controller = copyBridgeController(a.Controller)
	b.DatapathID = copyBridgeDatapathID(a.DatapathID)
	b.ExternalIDs = copyBridgeExternalIDs(a.ExternalIDs)
	b.FailMode = copyBridgeFailMode(a.FailMode)
	b.FloodVLANs = copyBridgeFloodVLANs(a.FloodVLANs)
	b.FlowTables = copyBridgeFlowTables(a.FlowTables)
	b.IPFIX = copyBridgeIPFIX(a.IPFIX)
	b.Mirrors = copyBridgeMirrors(a.Mirrors)
	b.Netflow = copyBridgeNetflow(a.Netflow)
	b.OtherConfig = copyBridgeOtherConfig(a.OtherConfig)
	b.Ports = copyBridgePorts(a.Ports)
	b.Protocols = copyBridgeProtocols(a.Protocols)
	b.RSTPStatus = copyBridgeRSTPStatus(a.RSTPStatus)
	b.Sflow = copyBridgeSflow(a.Sflow)
	b.Status = copyBridgeStatus(a.Status)
}

func (a *Bridge) DeepCopy() *Bridge {
	b := new(Bridge)
	a.DeepCopyInto(b)
	return b
}

func (a *Bridge) CloneModelInto(b model.Model) {
	c := b.(*Bridge)
	a.DeepCopyInto(c)
}

func (a *Bridge) CloneModel() model.Model {
	return a.DeepCopy()
}

func (a *Bridge) Equals(b *Bridge) bool {
	return a.UUID == b.UUID &&
		equalBridgeAutoAttach(a.AutoAttach, b.AutoAttach) &&
		equalBridgeController(a.Controller, b.Controller) &&
		equalBridgeDatapathID(a.DatapathID, b.DatapathID) &&
		a.DatapathType == b.DatapathType &&
		a.DatapathVersion == b.DatapathVersion &&
		equalBridgeExternalIDs(a.ExternalIDs, b.ExternalIDs) &&
		equalBridgeFailMode(a.FailMode, b.FailMode) &&
		equalBridgeFloodVLANs(a.FloodVLANs, b.FloodVLANs) &&
		equalBridgeFlowTables(a.FlowTables, b.FlowTables) &&
		equalBridgeIPFIX(a.IPFIX, b.IPFIX) &&
		a.McastSnoopingEnable == b.McastSnoopingEnable &&
		equalBridgeMirrors(a.Mirrors, b.Mirrors) &&
		a.Name == b.Name &&
		equalBridgeNetflow(a.Netflow, b.Netflow) &&
		equalBridgeOtherConfig(a.OtherConfig, b.OtherConfig) &&
		equalBridgePorts(a.Ports, b.Ports) &&
		equalBridgeProtocols(a.Protocols, b.Protocols) &&
		a.RSTPEnable == b.RSTPEnable &&
		equalBridgeRSTPStatus(a.RSTPStatus, b.RSTPStatus) &&
		equalBridgeSflow(a.Sflow, b.Sflow) &&
		equalBridgeStatus(a.Status, b.Status) &&
		a.STPEnable == b.STPEnable
}

func (a *Bridge) EqualsModel(b model.Model) bool {
	c := b.(*Bridge)
	return a.Equals(c)
}

var _ model.CloneableModel = &Bridge{}
var _ model.ComparableModel = &Bridge{}
