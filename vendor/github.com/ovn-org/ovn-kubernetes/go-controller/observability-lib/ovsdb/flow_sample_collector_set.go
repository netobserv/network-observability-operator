// Code generated by "libovsdb.modelgen"
// DO NOT EDIT.

package ovsdb

import "github.com/ovn-org/libovsdb/model"

const FlowSampleCollectorSetTable = "Flow_Sample_Collector_Set"

// FlowSampleCollectorSet defines an object in Flow_Sample_Collector_Set table
type FlowSampleCollectorSet struct {
	UUID         string            `ovsdb:"_uuid"`
	Bridge       string            `ovsdb:"bridge"`
	ExternalIDs  map[string]string `ovsdb:"external_ids"`
	ID           int               `ovsdb:"id"`
	IPFIX        *string           `ovsdb:"ipfix"`
	LocalGroupID *int              `ovsdb:"local_group_id"`
}

func (a *FlowSampleCollectorSet) GetUUID() string {
	return a.UUID
}

func (a *FlowSampleCollectorSet) GetBridge() string {
	return a.Bridge
}

func (a *FlowSampleCollectorSet) GetExternalIDs() map[string]string {
	return a.ExternalIDs
}

func copyFlowSampleCollectorSetExternalIDs(a map[string]string) map[string]string {
	if a == nil {
		return nil
	}
	b := make(map[string]string, len(a))
	for k, v := range a {
		b[k] = v
	}
	return b
}

func equalFlowSampleCollectorSetExternalIDs(a, b map[string]string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if len(a) != len(b) {
		return false
	}
	for k, v := range a {
		if w, ok := b[k]; !ok || v != w {
			return false
		}
	}
	return true
}

func (a *FlowSampleCollectorSet) GetID() int {
	return a.ID
}

func (a *FlowSampleCollectorSet) GetIPFIX() *string {
	return a.IPFIX
}

func copyFlowSampleCollectorSetIPFIX(a *string) *string {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalFlowSampleCollectorSetIPFIX(a, b *string) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *FlowSampleCollectorSet) GetLocalGroupID() *int {
	return a.LocalGroupID
}

func copyFlowSampleCollectorSetLocalGroupID(a *int) *int {
	if a == nil {
		return nil
	}
	b := *a
	return &b
}

func equalFlowSampleCollectorSetLocalGroupID(a, b *int) bool {
	if (a == nil) != (b == nil) {
		return false
	}
	if a == b {
		return true
	}
	return *a == *b
}

func (a *FlowSampleCollectorSet) DeepCopyInto(b *FlowSampleCollectorSet) {
	*b = *a
	b.ExternalIDs = copyFlowSampleCollectorSetExternalIDs(a.ExternalIDs)
	b.IPFIX = copyFlowSampleCollectorSetIPFIX(a.IPFIX)
	b.LocalGroupID = copyFlowSampleCollectorSetLocalGroupID(a.LocalGroupID)
}

func (a *FlowSampleCollectorSet) DeepCopy() *FlowSampleCollectorSet {
	b := new(FlowSampleCollectorSet)
	a.DeepCopyInto(b)
	return b
}

func (a *FlowSampleCollectorSet) CloneModelInto(b model.Model) {
	c := b.(*FlowSampleCollectorSet)
	a.DeepCopyInto(c)
}

func (a *FlowSampleCollectorSet) CloneModel() model.Model {
	return a.DeepCopy()
}

func (a *FlowSampleCollectorSet) Equals(b *FlowSampleCollectorSet) bool {
	return a.UUID == b.UUID &&
		a.Bridge == b.Bridge &&
		equalFlowSampleCollectorSetExternalIDs(a.ExternalIDs, b.ExternalIDs) &&
		a.ID == b.ID &&
		equalFlowSampleCollectorSetIPFIX(a.IPFIX, b.IPFIX) &&
		equalFlowSampleCollectorSetLocalGroupID(a.LocalGroupID, b.LocalGroupID)
}

func (a *FlowSampleCollectorSet) EqualsModel(b model.Model) bool {
	c := b.(*FlowSampleCollectorSet)
	return a.Equals(c)
}

var _ model.CloneableModel = &FlowSampleCollectorSet{}
var _ model.ComparableModel = &FlowSampleCollectorSet{}
