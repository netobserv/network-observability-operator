package dashboards

import (
	"fmt"

	metricslatest "github.com/netobserv/network-observability-operator/api/flowmetrics/v1alpha1"
)

func CreateHealthDashboard(netobsNs, nsFlowsMetric string) (string, error) {
	d := Dashboard{Title: "NetObserv / Health"}

	// Global stats
	// TODO after direct-FLP: if Direct mode, get flow rate from loki if enabled, else from agent
	d.Rows = append(d.Rows, NewRow("", false, "100px", []Panel{
		NewPanel("Flows per second", metricslatest.ChartTypeSingleStat, "", 3, NewTarget(
			`sum(rate(netobserv_ingest_flows_processed[1m]))`, "")),
		NewPanel("Global sampling", metricslatest.ChartTypeSingleStat, "", 3, NewTarget(
			"avg(netobserv_agent_sampling_rate)", "")),
		NewPanel("Errors last minute", metricslatest.ChartTypeSingleStat, "", 3, NewTarget(
			`(sum(increase(netobserv_agent_errors_total{severity!="low"}[1m])) OR on() vector(0))
			+ (sum(increase(netobserv_ingest_errors[1m])) OR on() vector(0))
			+ (sum(increase(netobserv_encode_prom_errors[1m])) OR on() vector(0))
			+ (sum(increase(netobserv_loki_batch_retries_total[1m])) OR on() vector(0))
			+ (sum(increase(controller_runtime_reconcile_errors_total{job="netobserv-metrics-service"}[1m])) OR on() vector(0))
			`, "")),
		NewPanel("Dropped flows per second", metricslatest.ChartTypeSingleStat, "", 3, NewTarget(
			`(sum(rate(netobserv_loki_dropped_entries_total[1m])) OR on() vector(0))
			+ (sum(rate(netobserv_agent_dropped_flows_total[1m])) OR on() vector(0))
			`, "")),
	}))

	// FLP stats
	overheadQuery := fmt.Sprintf(
		"100 * sum(rate(%s{SrcK8S_Namespace='%s'}[1m]) or rate(%s{SrcK8S_Namespace!='%s',DstK8S_Namespace='%s'}[1m])) / sum(rate(%s[1m]))",
		nsFlowsMetric,
		netobsNs,
		nsFlowsMetric,
		netobsNs,
		netobsNs,
		nsFlowsMetric,
	)
	d.Rows = append(d.Rows,
		NewRow("Flowlogs-pipeline statistics", false, "250px", []Panel{
			NewPanel("Flows per second", metricslatest.ChartTypeLine, "", 4,
				NewTarget("sum(rate(netobserv_ingest_flows_processed[1m]))", "Flows ingested"),
				NewTarget("sum(rate(netobserv_loki_sent_entries_total[1m]))", "Flows sent to Loki"),
				NewTarget("sum(rate(netobserv_loki_dropped_entries_total[1m]))", "Flows dropped due to Loki error"),
			),
			NewPanel("Flows overhead (% generated by NetObserv own traffic)", metricslatest.ChartTypeLine, "", 4,
				NewTarget(overheadQuery, "% overhead"),
			),
			NewPanel("Errors per minute", metricslatest.ChartTypeStackArea, "", 4,
				NewTarget(`sum(increase(netobserv_ingest_errors[1m])) by (stage,code)`, "{{stage}} {{code}}"),
				NewTarget(`sum(increase(netobserv_encode_prom_errors[1m])) by (error)`, "metrics {{error}}"),
				NewTarget(`sum(increase(netobserv_loki_batch_retries_total[1m]))`, "loki retries"),
			),
			NewPanel("By namespace", metricslatest.ChartTypeLine, "", 4,
				NewTarget(
					fmt.Sprintf(`topk(10,sum(rate(%s{SrcK8S_Namespace!=""}[1m])) by (SrcK8S_Namespace))`, nsFlowsMetric),
					"From {{SrcK8S_Namespace}}",
				),
				NewTarget(
					fmt.Sprintf(`topk(10,sum(rate(%s{DstK8S_Namespace!=""}[1m])) by (DstK8S_Namespace))`, nsFlowsMetric),
					"To {{DstK8S_Namespace}}",
				),
			),
			NewPanel("By node", metricslatest.ChartTypeLine, "", 4,
				NewTarget(`topk(10,sum(rate(netobserv_node_flows_total{SrcK8S_HostName!=""}[1m])) by (SrcK8S_HostName))`, "From {{SrcK8S_HostName}}"),
				NewTarget(`topk(10,sum(rate(netobserv_node_flows_total{DstK8S_HostName!=""}[1m])) by (DstK8S_HostName))`, "To {{DstK8S_HostName}}"),
			),
			NewPanel("Metrics cardinality", metricslatest.ChartTypeLine, "", 4, NewTarget(`count({__name__=~"netobserv_.*"}) by (job)`, "{{job}}")),
		}),
	)

	// Agent stats
	d.Rows = append(d.Rows, NewRow("eBPF agent statistics", true, "250px", []Panel{
		NewPanel("Eviction rate", metricslatest.ChartTypeLine, "", 4,
			NewTarget("sum(rate(netobserv_agent_evictions_total[1m])) by (source, reason)", "{{source}} {{reason}}"),
		),
		NewPanel("Evicted flows rate", metricslatest.ChartTypeLine, "", 4,
			NewTarget("sum(rate(netobserv_agent_evicted_flows_total[1m])) by (source, reason)", "{{source}} {{reason}}"),
		),
		NewPanel("Dropped flows rate", metricslatest.ChartTypeStackArea, "", 4,
			NewTarget(`sum(rate(netobserv_agent_dropped_flows_total[1m])) by (source, reason)`, "{{source}} {{reason}}"),
		),
		NewPanel("Ringbuffer / HashMap ratio", metricslatest.ChartTypeLine, "", 4,
			NewTarget(`(sum(rate(netobserv_agent_evicted_flows_total{source="accounter"}[1m])) OR on() vector(0)) / sum(rate(netobserv_agent_evicted_flows_total{source="hashmap"}[1m]))`, "ratio"),
		),
		NewPanel("Buffer size", metricslatest.ChartTypeLine, "", 4,
			NewTarget(`sum(netobserv_agent_buffer_size) by (name)`, "{{name}}"),
		),
		NewPanel("Errors per minute", metricslatest.ChartTypeStackArea, "", 4,
			NewTarget(`sum(increase(netobserv_agent_errors_total[1m])) by (component, error, severity)`, "{{component}} {{error}} (sev: {{severity}})"),
		),
		NewPanel("Filtered flows rate", metricslatest.ChartTypeStackArea, "", 4,
			NewTarget("sum(rate(netobserv_agent_filtered_flows_total[1m])) by (source, reason)", "{{source}} {{reason}}"),
		),
	}))

	// Operator stats
	d.Rows = append(d.Rows, NewRow("Operator statistics", true, "250px", []Panel{
		NewPanel("Reconcile events per minute", metricslatest.ChartTypeStackArea, "", 6,
			NewTarget(`sum(increase(controller_runtime_reconcile_total{job="netobserv-metrics-service"}[1m])) by (controller,result)`, "{{controller}}: {{result}}"),
		),
		NewPanel("Average and P99 reconcile time", metricslatest.ChartTypeLine, metricslatest.UnitSeconds, 6,
			NewTarget(`sum(rate(controller_runtime_reconcile_time_seconds_sum{job="netobserv-metrics-service"}[1m])) / sum(rate(controller_runtime_reconcile_time_seconds_count{job="netobserv-metrics-service"}[1m]))`, "average"),
			NewTarget(`histogram_quantile(0.99, sum by(le) (rate(controller_runtime_reconcile_time_seconds_bucket{job="netobserv-metrics-service"}[1m])))`, "p99"),
		),
	}))

	// CPU and memory
	d.Rows = append(d.Rows, NewRow("Resource usage", true, "250px", []Panel{
		NewPanel("Overall CPU", metricslatest.ChartTypeStackArea, "", 6,
			NewTarget(`sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{container="netobserv-ebpf-agent"})`, "eBPF agent"),
			NewTarget(`sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{container="flowlogs-pipeline"})`, "flowlogs-pipeline"),
			NewTarget(`sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{container!="",pod=~"netobserv-controller-manager.*"})`, "operator"),
		),
		NewPanel("Overall memory", metricslatest.ChartTypeStackArea, "", 6,
			NewTarget(`sum(container_memory_rss{container="netobserv-ebpf-agent"})`, "eBPF agent"),
			NewTarget(`sum(container_memory_rss{container="flowlogs-pipeline"})`, "flowlogs-pipeline"),
			NewTarget(`sum(container_memory_rss{container!="",pod=~"netobserv-controller-manager.*"})`, "operator"),
		),
		NewPanel("eBPF agent CPU - top 10 pods", metricslatest.ChartTypeStackArea, "", 6,
			NewTarget(`topk(10, node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{container="netobserv-ebpf-agent"})`, "{{pod}}"),
		),
		NewPanel("eBPF agent memory - top 10 pods", metricslatest.ChartTypeStackArea, "", 6,
			NewTarget(`topk(10, container_memory_rss{container="netobserv-ebpf-agent"})`, "{{pod}}"),
		),
		NewPanel("Flowlogs-pipeline CPU - top 10 pods", metricslatest.ChartTypeStackArea, "", 6,
			NewTarget(`topk(10, node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate{container="flowlogs-pipeline"})`, "{{pod}}"),
		),
		NewPanel("Flowlogs-pipeline memory - top 10 pods", metricslatest.ChartTypeStackArea, "", 6,
			NewTarget(`topk(10, container_memory_rss{container="flowlogs-pipeline"})`, "{{pod}}"),
		),
	}))

	return d.ToGrafanaJSON(), nil
}
